# our base build image
FROM  navikey/raspbian-buster:latest

# update apt
RUN apt-get update \
	&& apt-get install -y --no-install-recommends apt-utils \
	# install necessary build tools \
	&& apt-get -qy install build-essential cmake pkg-config unzip wget \
	# install necessary libraries \
	&& apt-get -qy install \
		libjpeg-dev \
		libtiff5-dev \
		libpng-dev \
		libavcodec-dev \
		libavformat-dev \
		libswscale-dev \
		libv4l-dev \
		libxvidcore-dev \
		libx264-dev \
	#Had to break the install into chunks as the deps wouldn't resolve.  \
	&& apt-get -qy install \
		libgtk2.0-dev \
		libgtk-3-dev \
		libatlas-base-dev \
		gfortran \
		libraspberrypi0 \
                python2.7-dev \
		python3-dev \
		python-pip \
		python-numpy \
                python3-pip \
		python3-numpy \
		python-setuptools \
		python3-setuptools \
	# cleanup apt. \
	&& apt-get purge -y --auto-remove \
	&& rm -rf /var/lib/apt/lists/*


RUN pip3 install --upgrade pip
RUN pip3 install -U setuptools
RUN pip3 install numpy imutils flask paho-mqtt

ARG OPENCV_VERSION=4.4.0
ENV OPENCV_VERSION $OPENCV_VERSION

RUN  cd /tmp \
        && wget -c -N -nv -O opencv.zip https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip \
        && unzip opencv.zip \
        && wget -c -N -nv -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip \
        && unzip opencv_contrib.zip \
        && cd /tmp/opencv-$OPENCV_VERSION \
        && mkdir build \
        && cd build \
        && cmake -D CMAKE_BUILD_TYPE=RELEASE \
                -D OPENCV_GENERATE_PKGCONFIG=YES \
                -D CMAKE_INSTALL_PREFIX=/usr/local \
                -D INSTALL_C_EXAMPLES=ON \
                -D BUILD_PYTHON_SUPPORT=ON \
                -D BUILD_NEW_PYTHON_SUPPORT=ON \
                -D INSTALL_PYTHON_EXAMPLES=ON \
                -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib-$OPENCV_VERSION/modules \
                -D BUILD_EXAMPLES=ON .. \
        && make -j4  \
        && make \
        && make install \
        && make clean \
        && cd /

RUN mkdir /open-cv-build
RUN mv /tmp/opencv-$OPENCV_VERSION/build /open-cv-build/

################
# yolo darknet #
################
WORKDIR /
RUN apt-get update && apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy  libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev wget unzip
RUN git clone https://github.com/AlexeyAB/darknet.git
WORKDIR darknet
RUN sed -i 's/OPENCV=0/OPENCV=1/;s/LIBSO=0/LIBSO=1/' Makefile
RUN ln -sf /usr/local/lib/pkgconfig/opencv4.pc /usr/local/lib/pkgconfig/opencv.pc
RUN make

RUN sed -i 's/from queue/from multiprocessing/g' darknet_video.py
RUN wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights


COPY opencv_yolo/darknet_video.py .
COPY opencv_yolo/customDarknet.py .
COPY yolov3-models yolov3-models
COPY docker-entrypoint.sh .

ENTRYPOINT ["./docker-entrypoint.sh"]
CMD []

